var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/injectables/AccessTokenGuard.html",[0,0.685,1,1.546]],["body/injectables/AccessTokenGuard.html",[0,0.955,1,2.158,2,1.434,3,0.553,4,0.48,5,0.48,6,2.483,7,0.553,8,2.158,9,4.061,10,1.434,11,3.043,12,5.225,13,1.211,14,3.043,15,2.158,16,0.044,17,1.913,18,0.843,19,2.158,20,4.061,21,3.977,22,3.043,23,2.483,24,1.617,25,0.948,26,0.907,27,2.113,28,2.483,29,1.434,30,0.553,31,0.228,32,1.617,33,2.483,34,2.483,35,1.837,36,1.434,37,4.061,38,3.043,39,3.043,40,3.043,41,1.913,42,1.617,43,3.043,44,0.031,45,0.031]],["title/injectables/AccessTokenStrategy.html",[0,0.685,46,1.371]],["body/injectables/AccessTokenStrategy.html",[0,0.953,2,1.428,3,0.551,4,0.478,5,0.478,7,0.551,8,2.152,10,2.149,13,1.208,15,1.611,16,0.044,17,1.428,18,0.629,19,1.611,24,1.611,25,0.946,26,0.904,29,1.428,30,0.736,31,0.227,32,1.611,35,1.83,36,1.428,41,1.428,44,0.031,45,0.031,46,1.908,47,1.83,48,3.304,49,3.031,50,3.304,51,3.063,52,3.031,53,2.812,54,2.105,55,2.105,56,2.105,57,1.83,58,1.908,59,2.152,60,2.105,61,2.105,62,1.611,63,2.105,64,1.516,65,1.428,66,2.473,67,2.473,68,2.473,69,2.473]],["title/modules/AppModule.html",[70,1.757,71,1.757]],["body/modules/AppModule.html",[1,2.071,3,0.52,4,0.451,5,0.451,16,0.045,18,0.594,25,1.032,26,0.854,27,1.988,30,0.52,31,0.214,42,2.527,44,0.03,45,0.03,70,2.353,71,3.099,72,1.521,73,2.071,74,2.335,75,2.335,76,2.727,77,2.706,78,1.988,79,1.988,80,2.863,81,3.179,82,2.335,83,1.728,84,3.897,85,2.863,86,2.863,87,2.863,88,3.897,89,2.335,90,3.897,91,2.335,92,1.349,93,2.863,94,2.863,95,2.863,96,2.863,97,2.863,98,2.863,99,3.897,100,2.863,101,2.863,102,2.335,103,2.863,104,2.863]],["title/classes/CreateUserDto.html",[31,0.218,105,1.546]],["body/classes/CreateUserDto.html",[3,0.773,4,0.671,5,0.671,16,0.04,30,0.773,31,0.318,44,0.038,45,0.038,105,2.663,106,2.259,107,3.469,108,2.953]],["title/interfaces/JwtPayload.html",[51,1.757,62,1.546]],["body/interfaces/JwtPayload.html",[0,0.968,3,0.564,4,0.49,5,0.49,7,0.564,10,1.463,16,0.044,18,0.854,25,0.958,26,0.926,29,1.463,30,0.748,31,0.233,32,1.65,35,1.874,36,1.463,41,1.463,44,0.031,45,0.031,46,1.463,47,1.874,50,2.533,51,2.787,53,2.156,54,2.156,55,2.156,56,2.156,57,1.874,58,1.939,59,2.187,60,2.156,61,2.156,62,1.65,63,3.413,64,1.967,65,2.315,66,2.533,67,2.533,68,2.533,69,2.533,109,3.105,110,1.726]],["title/classes/LoginDto.html",[31,0.218,111,1.546]],["body/classes/LoginDto.html",[3,0.63,4,0.547,5,0.547,7,0.63,13,1.318,16,0.043,18,0.918,25,0.72,30,0.63,31,0.331,44,0.034,45,0.034,64,1.919,65,2.294,92,2.294,106,1.843,110,1.855,111,2.35,112,2.829,113,2.67,114,2.829,115,3.468,116,3.468,117,3.468,118,3.607,119,3.607,120,3.971,121,2.829,122,2.408,123,2.829]],["title/injectables/RefreshTokenGuard.html",[0,0.685,124,1.757]],["body/injectables/RefreshTokenGuard.html",[0,1.1,2,1.786,3,0.689,4,0.598,5,0.598,10,2.389,13,1.131,16,0.044,25,0.97,26,1.131,28,3.093,29,1.786,30,0.689,31,0.284,32,2.015,33,3.093,35,2.289,44,0.036,45,0.036,124,2.824,125,3.093,126,3.792,127,2.633]],["title/injectables/RefreshTokenStrategy.html",[0,0.685,128,1.546]],["body/injectables/RefreshTokenStrategy.html",[0,0.794,2,1.591,3,0.614,4,0.532,5,0.532,7,0.614,8,2.31,10,2.048,13,1.296,15,1.794,16,0.044,17,1.591,18,0.701,19,1.794,24,1.794,25,1.053,26,1.007,29,1.591,30,0.614,36,1.591,44,0.033,45,0.033,48,3.546,53,3.019,54,2.345,55,2.345,56,2.345,57,2.039,58,1.591,128,1.794,129,2.345,130,3.377,131,3.377,132,4.807,133,3.377,134,2.755,135,2.755,136,2.039,137,2.755,138,2.345]],["title/classes/RegisterDto.html",[31,0.218,139,1.546]],["body/classes/RegisterDto.html",[3,0.588,4,0.51,5,0.51,7,0.588,13,1.404,16,0.043,18,0.977,25,0.671,30,0.588,31,0.317,44,0.032,45,0.032,64,1.99,65,2.219,92,2.219,106,1.719,110,1.774,113,2.843,114,2.639,118,3.449,119,4.074,120,4.074,121,2.639,122,2.246,123,3.449,139,2.247,140,2.639,141,3.842,142,3.235,143,4.228,144,3.235,145,3.235]],["title/classes/UpdateUserDto.html",[31,0.218,146,1.757]],["body/classes/UpdateUserDto.html",[3,0.669,4,0.581,5,0.581,7,0.669,13,1.098,16,0.043,18,0.764,25,0.953,30,0.669,31,0.276,32,1.957,44,0.035,45,0.035,105,1.957,106,1.957,108,2.558,110,1.927,146,2.773,147,3.747,148,3.476,149,2.773,150,3.683,151,3.683,152,3.005,153,2.224,154,3.683,155,3.683,156,3.683]],["title/entities/User.html",[157,2.021,158,1.546]],["body/entities/User.html",[3,0.44,4,0.382,5,0.382,7,0.44,13,1.451,16,0.044,18,1.064,25,0.719,30,0.44,31,0.26,42,2.349,44,0.026,45,0.026,64,1.822,65,1.908,92,2.083,110,1.455,113,2.939,148,2.812,149,2.093,157,1.682,158,1.842,159,1.976,160,1.976,161,4.05,162,3.304,163,4.05,164,4.421,165,2.422,166,4.421,167,3.607,168,4.868,169,2.422,170,2.422,171,2.422,172,2.422,173,2.422,174,4.05,175,2.422,176,2.422,177,2.422,178,2.422,179,3.467,180,2.422,181,4.421,182,3.467,183,3.467,184,1.682,185,3.467,186,1.976,187,2.422,188,2.422,189,1.976,190,2.422]],["title/controllers/UserController.html",[191,1.546,192,1.757]],["body/controllers/UserController.html",[1,0.926,3,0.317,4,0.275,5,0.275,7,0.317,8,1.441,13,1.212,15,1.995,16,0.045,17,1.769,18,0.779,19,1.995,24,2.288,25,0.933,26,0.52,30,0.317,31,0.131,34,1.422,41,2.118,44,0.021,45,0.021,58,2.19,64,1.246,105,1.441,111,1.995,113,2.6,124,1.052,127,3.315,139,1.995,146,2.009,149,2.6,153,1.052,191,1.768,192,1.637,193,1.422,194,1.422,195,3.062,196,2.212,197,2.212,198,2.212,199,2.711,200,1.743,201,1.743,202,1.743,203,1.743,204,4.306,205,3.062,206,1.422,207,1.743,208,1.743,209,3.062,210,1.743,211,3.062,212,1.743,213,1.743,214,3.062,215,3.791,216,2.212,217,1.743,218,1.743,219,1.743,220,1.743,221,1.743,222,1.743,223,1.743,224,1.568,225,1.422,226,1.422,227,1.422,228,1.21,229,1.743,230,1.21,231,2.607,232,1.422,233,1.743,234,1.743,235,1.743,236,1.743,237,1.743,238,3.327,239,1.743,240,1.743,241,1.743,242,1.743,243,1.743,244,1.743,245,1.422,246,1.743,247,1.743,248,1.743,249,1.743,250,1.743,251,1.422,252,1.422,253,1.743,254,1.743,255,1.743,256,1.743,257,1.743,258,1.743,259,1.743]],["title/modules/UserModule.html",[70,1.757,76,1.546]],["body/modules/UserModule.html",[3,0.47,4,0.408,5,0.408,16,0.045,17,1.218,25,1.082,26,0.771,30,0.47,31,0.194,42,1.373,44,0.028,45,0.028,46,2.343,70,2.192,72,1.373,73,1.929,76,2.853,77,2.521,78,1.795,79,1.795,81,2.108,82,2.108,83,1.56,91,2.108,92,1.218,102,2.962,128,2.642,158,1.373,192,2.534,193,2.962,224,2.343,225,2.108,260,2.108,261,2.108,262,2.584,263,2.584,264,2.584,265,3.63,266,1.795,267,2.108,268,2.584,269,1.795,270,2.108,271,2.584,272,2.584,273,2.584,274,2.584,275,2.584,276,2.584,277,2.584,278,2.584,279,2.584,280,2.584,281,2.584,282,2.584,283,2.584,284,2.584,285,2.584,286,2.584,287,2.584]],["title/injectables/UserService.html",[0,0.685,224,1.371]],["body/injectables/UserService.html",[0,0.32,2,0.36,3,0.139,4,0.121,5,0.121,7,0.139,8,0.722,10,0.64,13,1.024,15,1.731,16,0.044,17,1.535,18,0.676,19,1.731,24,2.109,25,0.774,26,0.228,30,0.139,31,0.057,36,1.693,41,1.758,44,0.01,45,0.01,58,1.329,59,0.722,63,0.944,64,1.59,65,2.102,83,0.462,89,2.658,92,1.619,111,1.623,127,3.216,136,0.82,139,1.826,141,1.813,148,2.949,149,2.329,153,0.462,158,2.576,162,1.813,184,0.531,189,2.3,191,0.406,195,1.813,196,1.108,197,1.813,198,1.813,205,3.954,206,1.108,209,3.238,211,2.658,214,3.321,215,3.855,216,1.496,224,0.64,226,0.624,227,0.624,228,2.756,232,0.624,245,2.931,251,0.624,252,1.496,266,0.531,267,0.624,269,0.531,270,1.496,288,0.624,289,3.857,290,4.578,291,1.359,292,1.359,293,1.359,294,1.834,295,0.765,296,2.82,297,1.834,298,1.813,299,3.055,300,0.765,301,0.765,302,1.359,303,0.765,304,2.222,305,3.044,306,2.121,307,3.258,308,3.258,309,1.359,310,0.765,311,1.359,312,1.359,313,1.359,314,1.359,315,1.359,316,2.222,317,1.359,318,0.765,319,1.359,320,1.359,321,0.765,322,1.359,323,1.359,324,1.359,325,1.359,326,0.765,327,2.546,328,1.359,329,2.077,330,0.765,331,1.359,332,2.222,333,1.359,334,1.834,335,1.834,336,1.359,337,0.765,338,0.765,339,0.765,340,0.765,341,0.765,342,0.765,343,0.765,344,1.108,345,0.765,346,0.765,347,4.325,348,0.765,349,1.359,350,1.359,351,0.765,352,1.359,353,1.359,354,1.359,355,1.834,356,1.359,357,0.765,358,0.765,359,1.359,360,0.765,361,0.765,362,1.359,363,0.765,364,1.834,365,0.765,366,0.765,367,0.765,368,1.359,369,0.765,370,0.765,371,0.765,372,0.765,373,1.834,374,0.765,375,0.765,376,0.765,377,0.765,378,0.765,379,0.765,380,1.359,381,0.765,382,0.765,383,0.765,384,0.765,385,0.765,386,1.359,387,1.359,388,1.359,389,0.765,390,0.765,391,0.765,392,1.359,393,0.765,394,0.765,395,1.359,396,0.765,397,0.765,398,0.765,399,0.765,400,0.765]],["title/coverage.html",[401,2.736]],["body/coverage.html",[0,1.141,1,1.416,5,0.42,6,2.174,16,0.044,18,0.553,31,0.345,44,0.028,45,0.028,46,1.255,47,2.576,51,1.609,59,1.416,62,1.416,105,1.416,107,2.174,108,2.576,111,1.416,112,2.174,124,1.609,125,2.174,128,1.416,129,2.576,136,1.609,139,1.416,140,2.174,146,1.609,147,2.174,157,1.85,158,1.416,160,2.174,191,1.416,192,1.609,194,2.174,224,1.255,230,1.85,231,1.85,288,2.174,305,2.174,401,1.85,402,2.665,403,2.665,404,2.665,405,2.576,406,2.665,407,2.174,408,5.645,409,5.253,410,4.849,411,2.174,412,2.174,413,2.174,414,4.849,415,2.665,416,3.709,417,2.665,418,2.665,419,2.665,420,2.665,421,2.665,422,2.665]],["title/dependencies.html",[73,1.855,423,1.995]],["body/dependencies.html",[16,0.045,26,0.811,27,1.89,29,1.282,31,0.282,44,0.029,45,0.029,57,2.272,58,1.282,73,1.446,83,1.643,122,1.89,135,3.07,152,2.22,153,1.643,184,2.613,186,2.22,266,1.89,269,1.89,344,2.22,424,2.721,425,2.721,426,2.721,427,2.721,428,4.314,429,2.721,430,4.314,431,3.763,432,4.314,433,2.721,434,3.763,435,3.763,436,4.314,437,2.721,438,2.721,439,2.721,440,2.721,441,3.763,442,3.07,443,2.721,444,3.763,445,2.721,446,2.721,447,2.721,448,2.721,449,2.721,450,2.721,451,3.763,452,2.721,453,2.721,454,2.721,455,2.721,456,2.721,457,2.721,458,2.721,459,2.721,460,2.721,461,2.721,462,2.721,463,2.721,464,2.721,465,2.721,466,2.721,467,2.721]],["title/miscellaneous/functions.html",[468,1.152,469,2.848]],["body/miscellaneous/functions.html",[7,0.786,16,0.038,44,0.038,45,0.038,405,3.002,407,4.377,468,2.037,469,3.527,470,3.527]],["title/index.html",[7,0.444,471,2.446,472,2.446]],["body/index.html",[4,0.463,16,0.043,44,0.03,45,0.03,298,2.397,306,2.041,401,2.041,442,2.397,473,2.939,474,2.939,475,3.967,476,2.939,477,2.939,478,2.939,479,2.939,480,2.939,481,4.49,482,2.939,483,2.939,484,2.939,485,5.287,486,2.939,487,2.939,488,2.939,489,5.173,490,2.939,491,2.939,492,3.967,493,2.939,494,2.939,495,2.939,496,2.939,497,3.967,498,3.967,499,2.939,500,2.939,501,2.939,502,3.967,503,3.967,504,2.939,505,2.939,506,2.939,507,2.939,508,2.939,509,2.397,510,2.939,511,2.939,512,2.939,513,2.939,514,2.939,515,2.939,516,2.939,517,2.939,518,2.939,519,2.939,520,2.397,521,2.939,522,2.939,523,2.939,524,2.939,525,2.939,526,2.939,527,2.397]],["title/modules.html",[72,2.094]],["body/modules.html",[16,0.038,44,0.038,45,0.038,71,2.567,72,2.259,76,2.259,509,4.088,528,5.011,529,5.011,530,5.011]],["title/overview.html",[531,3.214]],["body/overview.html",[2,1.656,16,0.041,44,0.034,45,0.034,46,2.308,62,1.868,71,3.111,72,1.868,73,2.37,74,2.868,75,2.868,76,2.996,77,3.097,78,2.441,79,2.441,106,1.868,128,2.603,138,2.441,159,2.868,191,1.868,224,2.308,260,2.868,261,2.868,531,2.868,532,3.515,533,4.899,534,3.515]],["title/properties.html",[110,1.465,423,1.995]],["body/properties.html",[16,0.043,44,0.038,45,0.038,110,1.784,306,2.953,520,3.469,527,3.469,535,4.252,536,4.252,537,4.252]],["title/miscellaneous/typealiases.html",[468,1.152,538,3.491]],["body/miscellaneous/typealiases.html",[7,0.752,16,0.037,18,1.093,44,0.037,45,0.037,228,3.424,329,4.022,468,1.95,539,4.138,540,4.138,541,4.138,542,4.138,543,4.931,544,4.138]],["title/miscellaneous/variables.html",[468,1.152,545,2.848]],["body/miscellaneous/variables.html",[7,0.588,16,0.044,21,2.639,23,2.639,36,1.524,41,1.992,42,1.719,44,0.032,45,0.032,47,1.953,59,2.247,60,2.246,61,2.246,64,1.211,129,2.246,134,2.639,136,2.553,137,2.639,138,2.246,167,4.227,230,2.936,231,2.936,405,2.246,411,3.449,412,2.639,413,2.639,468,1.524,470,2.639,545,2.639,546,3.235,547,3.235,548,3.235,549,3.235,550,5.182,551,3.235,552,4.228,553,3.235,554,3.235,555,3.235,556,3.235,557,3.235,558,3.235,559,3.235]]],"invertedIndex":[["",{"_index":16,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"modules/AppModule.html":{},"classes/CreateUserDto.html":{},"interfaces/JwtPayload.html":{},"classes/LoginDto.html":{},"injectables/RefreshTokenGuard.html":{},"injectables/RefreshTokenStrategy.html":{},"classes/RegisterDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":408,"title":{},"body":{"coverage.html":{}}}],["0.0.1",{"_index":536,"title":{},"body":{"properties.html":{}}}],["0.1.13",{"_index":462,"title":{},"body":{"dependencies.html":{}}}],["0.13.2",{"_index":449,"title":{},"body":{"dependencies.html":{}}}],["0.3.5",{"_index":467,"title":{},"body":{"dependencies.html":{}}}],["0.30.0",{"_index":430,"title":{},"body":{"dependencies.html":{}}}],["0.4.0",{"_index":425,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":448,"title":{},"body":{"dependencies.html":{}}}],["0.5.2",{"_index":456,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":409,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":416,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":414,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":415,"title":{},"body":{"coverage.html":{}}}],["06ca2296da7e20911ac99762e524b26fb9eb09de849c41d7de8eb823e2eb8fa7a90e95bd14d27b6d9766610a4f8e195682fcdf26bdb1493362aa9effb5b2ca0a",{"_index":558,"title":{},"body":{"miscellaneous/variables.html":{}}}],["1",{"_index":533,"title":{},"body":{"overview.html":{}}}],["1.1.19",{"_index":427,"title":{},"body":{"dependencies.html":{}}}],["1.16.0",{"_index":455,"title":{},"body":{"dependencies.html":{}}}],["1/6",{"_index":418,"title":{},"body":{"coverage.html":{}}}],["10.0.8",{"_index":434,"title":{},"body":{"dependencies.html":{}}}],["12",{"_index":362,"title":{},"body":{"injectables/UserService.html":{}}}],["15",{"_index":356,"title":{},"body":{"injectables/UserService.html":{}}}],["16",{"_index":417,"title":{},"body":{"coverage.html":{}}}],["16.3.0",{"_index":452,"title":{},"body":{"dependencies.html":{}}}],["2",{"_index":532,"title":{},"body":{"overview.html":{}}}],["2.0.0",{"_index":451,"title":{},"body":{"dependencies.html":{}}}],["2.4.3",{"_index":447,"title":{},"body":{"dependencies.html":{}}}],["24",{"_index":358,"title":{},"body":{"injectables/UserService.html":{}}}],["3.0.2",{"_index":464,"title":{},"body":{"dependencies.html":{}}}],["3.6.7",{"_index":444,"title":{},"body":{"dependencies.html":{}}}],["4",{"_index":534,"title":{},"body":{"overview.html":{}}}],["4.0.0",{"_index":457,"title":{},"body":{"dependencies.html":{}}}],["4ygn6.europe",{"_index":280,"title":{},"body":{"modules/UserModule.html":{}}}],["5",{"_index":138,"title":{},"body":{"injectables/RefreshTokenStrategy.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["5.0.1",{"_index":445,"title":{},"body":{"dependencies.html":{}}}],["60",{"_index":355,"title":{},"body":{"injectables/UserService.html":{}}}],["7",{"_index":359,"title":{},"body":{"injectables/UserService.html":{}}}],["7.2.0",{"_index":466,"title":{},"body":{"dependencies.html":{}}}],["7/10",{"_index":420,"title":{},"body":{"coverage.html":{}}}],["70",{"_index":419,"title":{},"body":{"coverage.html":{}}}],["8.0.0",{"_index":436,"title":{},"body":{"dependencies.html":{}}}],["8.0.3",{"_index":440,"title":{},"body":{"dependencies.html":{}}}],["8.2.1",{"_index":438,"title":{},"body":{"dependencies.html":{}}}],["8.4.3",{"_index":435,"title":{},"body":{"dependencies.html":{}}}],["8.7.3",{"_index":459,"title":{},"body":{"dependencies.html":{}}}],["8917ca796f23e75d55dba448bdb99ed3f648a96243a8aea47f8b0a3fad566dc1c826868a0b075542e656000fe67aeff32f0977002c3232bc47ed5eeb8b570864'q(cx/vsz5?r@y$r?4lfwtrt#eknu)j:q^ycqekzpz/a7g[yfu[mw;$nnxwhq7ddt",{"_index":557,"title":{},"body":{"miscellaneous/variables.html":{}}}],["89bf192b2b6468668da83dff4f0bc2d17908644894327050",{"_index":60,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"interfaces/JwtPayload.html":{},"miscellaneous/variables.html":{}}}],["access",{"_index":214,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["access_token",{"_index":349,"title":{},"body":{"injectables/UserService.html":{}}}],["accesstokenguard",{"_index":1,"title":{"injectables/AccessTokenGuard.html":{}},"body":{"injectables/AccessTokenGuard.html":{},"modules/AppModule.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["accesstokenstrategy",{"_index":46,"title":{"injectables/AccessTokenStrategy.html":{}},"body":{"injectables/AccessTokenStrategy.html":{},"interfaces/JwtPayload.html":{},"modules/UserModule.html":{},"coverage.html":{},"overview.html":{}}}],["account",{"_index":327,"title":{},"body":{"injectables/UserService.html":{}}}],["aliases",{"_index":539,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["amazing",{"_index":510,"title":{},"body":{"index.html":{}}}],["andwhere('hashed_refresh_token",{"_index":393,"title":{},"body":{"injectables/UserService.html":{}}}],["apollo",{"_index":441,"title":{},"body":{"dependencies.html":{}}}],["apollo/subgraph",{"_index":424,"title":{},"body":{"dependencies.html":{}}}],["apollofederationdriver",{"_index":98,"title":{},"body":{"modules/AppModule.html":{}}}],["app",{"_index":487,"title":{},"body":{"index.html":{}}}],["app_guard",{"_index":84,"title":{},"body":{"modules/AppModule.html":{}}}],["applications",{"_index":480,"title":{},"body":{"index.html":{}}}],["appmodule",{"_index":71,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["async",{"_index":290,"title":{},"body":{"injectables/UserService.html":{}}}],["authentication",{"_index":375,"title":{},"body":{"injectables/UserService.html":{}}}],["authguard",{"_index":28,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"injectables/RefreshTokenGuard.html":{}}}],["authguard('jwt",{"_index":33,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"injectables/RefreshTokenGuard.html":{}}}],["author",{"_index":520,"title":{},"body":{"index.html":{},"properties.html":{}}}],["autoloadentities",{"_index":93,"title":{},"body":{"modules/AppModule.html":{}}}],["autoschemafile",{"_index":99,"title":{},"body":{"modules/AppModule.html":{}}}],["await",{"_index":347,"title":{},"body":{"injectables/UserService.html":{}}}],["backers",{"_index":511,"title":{},"body":{"index.html":{}}}],["badrequestexception",{"_index":339,"title":{},"body":{"injectables/UserService.html":{}}}],["badrequestexception('passwords",{"_index":365,"title":{},"body":{"injectables/UserService.html":{}}}],["bbb6891861a6d735a7e9649fd03f3ccc2f7f43b30db0b49f37f7ee732976bf591b774868082c2f665827932625c76bb5ac05bb91d080a25c7aef3c38ad471033d&y2kwkbvs9q/=uue,7hsb",{"_index":137,"title":{},"body":{"injectables/RefreshTokenStrategy.html":{},"miscellaneous/variables.html":{}}}],["bcrypt",{"_index":344,"title":{},"body":{"injectables/UserService.html":{},"dependencies.html":{}}}],["bcrypt.compare(logindto.password",{"_index":382,"title":{},"body":{"injectables/UserService.html":{}}}],["bcrypt.compare(refreshtoken",{"_index":396,"title":{},"body":{"injectables/UserService.html":{}}}],["bcrypt.hash(password",{"_index":367,"title":{},"body":{"injectables/UserService.html":{}}}],["bcrypt.hash(refreshtoken",{"_index":361,"title":{},"body":{"injectables/UserService.html":{}}}],["bcryptjs",{"_index":446,"title":{},"body":{"dependencies.html":{}}}],["body",{"_index":204,"title":{},"body":{"controllers/UserController.html":{}}}],["bootstrap",{"_index":407,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["brokers",{"_index":278,"title":{},"body":{"modules/UserModule.html":{}}}],["browse",{"_index":530,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":528,"title":{},"body":{"modules.html":{}}}],["building",{"_index":476,"title":{},"body":{"index.html":{}}}],["canactivate",{"_index":9,"title":{},"body":{"injectables/AccessTokenGuard.html":{}}}],["canactivate(context",{"_index":20,"title":{},"body":{"injectables/AccessTokenGuard.html":{}}}],["checked",{"_index":324,"title":{},"body":{"injectables/UserService.html":{}}}],["checks",{"_index":311,"title":{},"body":{"injectables/UserService.html":{}}}],["class",{"_index":31,"title":{"classes/CreateUserDto.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"classes/UpdateUserDto.html":{}},"body":{"injectables/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"modules/AppModule.html":{},"classes/CreateUserDto.html":{},"interfaces/JwtPayload.html":{},"classes/LoginDto.html":{},"injectables/RefreshTokenGuard.html":{},"classes/RegisterDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":106,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"classes/UpdateUserDto.html":{},"overview.html":{}}}],["client",{"_index":277,"title":{},"body":{"modules/UserModule.html":{}}}],["clientkafka",{"_index":296,"title":{},"body":{"injectables/UserService.html":{}}}],["clientsmodule",{"_index":264,"title":{},"body":{"modules/UserModule.html":{}}}],["clientsmodule.register",{"_index":273,"title":{},"body":{"modules/UserModule.html":{}}}],["cluster_appmodule",{"_index":74,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":75,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_usermodule",{"_index":260,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_usermodule_providers",{"_index":261,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["column",{"_index":181,"title":{},"body":{"entities/User.html":{}}}],["column({nullable",{"_index":172,"title":{},"body":{"entities/User.html":{}}}],["column({unique",{"_index":170,"title":{},"body":{"entities/User.html":{}}}],["compare",{"_index":315,"title":{},"body":{"injectables/UserService.html":{}}}],["compodoc/compodoc",{"_index":426,"title":{},"body":{"dependencies.html":{}}}],["confirm",{"_index":377,"title":{},"body":{"injectables/UserService.html":{}}}],["confirmation",{"_index":332,"title":{},"body":{"injectables/UserService.html":{}}}],["confirmlink",{"_index":378,"title":{},"body":{"injectables/UserService.html":{}}}],["const",{"_index":36,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"interfaces/JwtPayload.html":{},"injectables/RefreshTokenStrategy.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["constructor",{"_index":10,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"interfaces/JwtPayload.html":{},"injectables/RefreshTokenGuard.html":{},"injectables/RefreshTokenStrategy.html":{},"injectables/UserService.html":{}}}],["constructor(clientkafka",{"_index":295,"title":{},"body":{"injectables/UserService.html":{}}}],["constructor(private",{"_index":34,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"controllers/UserController.html":{}}}],["constructor(reflector",{"_index":11,"title":{},"body":{"injectables/AccessTokenGuard.html":{}}}],["context",{"_index":23,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"miscellaneous/variables.html":{}}}],["context.getclass",{"_index":40,"title":{},"body":{"injectables/AccessTokenGuard.html":{}}}],["context.gethandler",{"_index":39,"title":{},"body":{"injectables/AccessTokenGuard.html":{}}}],["context.switchtohttp().getrequest",{"_index":554,"title":{},"body":{"miscellaneous/variables.html":{}}}],["controller",{"_index":191,"title":{"controllers/UserController.html":{}},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{},"overview.html":{}}}],["controllers",{"_index":193,"title":{},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{}}}],["core",{"_index":443,"title":{},"body":{"dependencies.html":{}}}],["coverage",{"_index":401,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["create",{"_index":154,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["create(@payload",{"_index":255,"title":{},"body":{"controllers/UserController.html":{}}}],["created_at",{"_index":161,"title":{},"body":{"entities/User.html":{}}}],["createdatecolumn",{"_index":182,"title":{},"body":{"entities/User.html":{}}}],["createdatecolumn({type",{"_index":165,"title":{},"body":{"entities/User.html":{}}}],["createparamdecorator",{"_index":551,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createquerybuilder",{"_index":390,"title":{},"body":{"injectables/UserService.html":{}}}],["createuserdto",{"_index":105,"title":{"classes/CreateUserDto.html":{}},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["credentials",{"_index":385,"title":{},"body":{"injectables/UserService.html":{}}}],["current_timestamp(6",{"_index":168,"title":{},"body":{"entities/User.html":{}}}],["data",{"_index":552,"title":{},"body":{"miscellaneous/variables.html":{}}}],["database",{"_index":89,"title":{},"body":{"modules/AppModule.html":{},"injectables/UserService.html":{}}}],["dataloader",{"_index":450,"title":{},"body":{"dependencies.html":{}}}],["date",{"_index":164,"title":{},"body":{"entities/User.html":{}}}],["days",{"_index":360,"title":{},"body":{"injectables/UserService.html":{}}}],["decorators",{"_index":113,"title":{},"body":{"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"entities/User.html":{},"controllers/UserController.html":{}}}],["default",{"_index":167,"title":{},"body":{"entities/User.html":{},"miscellaneous/variables.html":{}}}],["defined",{"_index":13,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"classes/LoginDto.html":{},"injectables/RefreshTokenGuard.html":{},"injectables/RefreshTokenStrategy.html":{},"classes/RegisterDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["denied",{"_index":398,"title":{},"body":{"injectables/UserService.html":{}}}],["dependencies",{"_index":73,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/UserModule.html":{},"dependencies.html":{},"overview.html":{}}}],["description",{"_index":306,"title":{},"body":{"injectables/UserService.html":{},"index.html":{},"properties.html":{}}}],["development",{"_index":488,"title":{},"body":{"index.html":{}}}],["documentation",{"_index":402,"title":{},"body":{"coverage.html":{}}}],["driver",{"_index":97,"title":{},"body":{"modules/AppModule.html":{}}}],["dto/login.dto",{"_index":227,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["dto/register.dto",{"_index":226,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["e2e",{"_index":499,"title":{},"body":{"index.html":{}}}],["efficient",{"_index":477,"title":{},"body":{"index.html":{}}}],["email",{"_index":65,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"interfaces/JwtPayload.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"entities/User.html":{},"injectables/UserService.html":{}}}],["encrypt",{"_index":314,"title":{},"body":{"injectables/UserService.html":{}}}],["entities",{"_index":159,"title":{},"body":{"entities/User.html":{},"overview.html":{}}}],["entities/user.entity",{"_index":267,"title":{},"body":{"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["entity",{"_index":157,"title":{"entities/User.html":{}},"body":{"entities/User.html":{},"coverage.html":{}}}],["entity('users",{"_index":187,"title":{},"body":{"entities/User.html":{}}}],["exclude",{"_index":185,"title":{},"body":{"entities/User.html":{}}}],["exclude()@column",{"_index":176,"title":{},"body":{"entities/User.html":{}}}],["execute",{"_index":394,"title":{},"body":{"injectables/UserService.html":{}}}],["executioncontext",{"_index":21,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"miscellaneous/variables.html":{}}}],["exists",{"_index":312,"title":{},"body":{"injectables/UserService.html":{}}}],["expiresin",{"_index":354,"title":{},"body":{"injectables/UserService.html":{}}}],["export",{"_index":30,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"modules/AppModule.html":{},"classes/CreateUserDto.html":{},"interfaces/JwtPayload.html":{},"classes/LoginDto.html":{},"injectables/RefreshTokenGuard.html":{},"injectables/RefreshTokenStrategy.html":{},"classes/RegisterDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["express",{"_index":135,"title":{},"body":{"injectables/RefreshTokenStrategy.html":{},"dependencies.html":{}}}],["extends",{"_index":32,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"interfaces/JwtPayload.html":{},"injectables/RefreshTokenGuard.html":{},"classes/UpdateUserDto.html":{}}}],["extractjwt",{"_index":55,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"interfaces/JwtPayload.html":{},"injectables/RefreshTokenStrategy.html":{}}}],["extractjwt.fromauthheaderasbearertoken",{"_index":68,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"interfaces/JwtPayload.html":{}}}],["file",{"_index":5,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"modules/AppModule.html":{},"classes/CreateUserDto.html":{},"interfaces/JwtPayload.html":{},"classes/LoginDto.html":{},"injectables/RefreshTokenGuard.html":{},"injectables/RefreshTokenStrategy.html":{},"classes/RegisterDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["findall",{"_index":195,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["forbiddenexception",{"_index":340,"title":{},"body":{"injectables/UserService.html":{}}}],["forbiddenexception('access",{"_index":397,"title":{},"body":{"injectables/UserService.html":{}}}],["found",{"_index":323,"title":{},"body":{"injectables/UserService.html":{}}}],["framework",{"_index":475,"title":{},"body":{"index.html":{}}}],["function",{"_index":406,"title":{},"body":{"coverage.html":{}}}],["functions",{"_index":469,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["g92iufkurdmcjl0y/kcjye4ndzb5gdgj+szi0fawaq5y7/5vh54yek9irwyvzr",{"_index":287,"title":{},"body":{"modules/UserModule.html":{}}}],["generate",{"_index":304,"title":{},"body":{"injectables/UserService.html":{}}}],["get('/users",{"_index":199,"title":{},"body":{"controllers/UserController.html":{}}}],["getcurrentuser",{"_index":230,"title":{},"body":{"controllers/UserController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["getcurrentuser('refreshtoken",{"_index":249,"title":{},"body":{"controllers/UserController.html":{}}}],["getcurrentuser('sub",{"_index":248,"title":{},"body":{"controllers/UserController.html":{}}}],["getting",{"_index":471,"title":{"index.html":{}},"body":{}}],["gettingstarted",{"_index":90,"title":{},"body":{"modules/AppModule.html":{}}}],["gettokens",{"_index":291,"title":{},"body":{"injectables/UserService.html":{}}}],["gettokens(userid",{"_index":302,"title":{},"body":{"injectables/UserService.html":{}}}],["graphql",{"_index":432,"title":{},"body":{"dependencies.html":{}}}],["graphqlmodule.forroot",{"_index":96,"title":{},"body":{"modules/AppModule.html":{}}}],["grow",{"_index":506,"title":{},"body":{"index.html":{}}}],["guards",{"_index":229,"title":{},"body":{"controllers/UserController.html":{}}}],["hash",{"_index":316,"title":{},"body":{"injectables/UserService.html":{}}}],["hashed",{"_index":189,"title":{},"body":{"entities/User.html":{},"injectables/UserService.html":{}}}],["hashed_refresh_token",{"_index":162,"title":{},"body":{"entities/User.html":{},"injectables/UserService.html":{}}}],["here",{"_index":517,"title":{},"body":{"index.html":{}}}],["http://google.com",{"_index":379,"title":{},"body":{"injectables/UserService.html":{}}}],["httpcode",{"_index":220,"title":{},"body":{"controllers/UserController.html":{}}}],["httpcode(httpstatus.created",{"_index":234,"title":{},"body":{"controllers/UserController.html":{}}}],["httpcode(httpstatus.ok",{"_index":238,"title":{},"body":{"controllers/UserController.html":{}}}],["https://nestjs.com",{"_index":524,"title":{},"body":{"index.html":{}}}],["httpstatus",{"_index":221,"title":{},"body":{"controllers/UserController.html":{}}}],["id",{"_index":148,"title":{},"body":{"classes/UpdateUserDto.html":{},"entities/User.html":{},"injectables/UserService.html":{}}}],["identifier",{"_index":403,"title":{},"body":{"coverage.html":{}}}],["import",{"_index":25,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"modules/AppModule.html":{},"interfaces/JwtPayload.html":{},"classes/LoginDto.html":{},"injectables/RefreshTokenGuard.html":{},"injectables/RefreshTokenStrategy.html":{},"classes/RegisterDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["imports",{"_index":81,"title":{},"body":{"modules/AppModule.html":{},"modules/UserModule.html":{}}}],["index",{"_index":7,"title":{"index.html":{}},"body":{"injectables/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"interfaces/JwtPayload.html":{},"classes/LoginDto.html":{},"injectables/RefreshTokenStrategy.html":{},"classes/RegisterDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":3,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"modules/AppModule.html":{},"classes/CreateUserDto.html":{},"interfaces/JwtPayload.html":{},"classes/LoginDto.html":{},"injectables/RefreshTokenGuard.html":{},"injectables/RefreshTokenStrategy.html":{},"classes/RegisterDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["inject",{"_index":341,"title":{},"body":{"injectables/UserService.html":{}}}],["inject('kafka_service",{"_index":345,"title":{},"body":{"injectables/UserService.html":{}}}],["injectable",{"_index":0,"title":{"injectables/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"injectables/RefreshTokenGuard.html":{},"injectables/RefreshTokenStrategy.html":{},"injectables/UserService.html":{}},"body":{"injectables/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"interfaces/JwtPayload.html":{},"injectables/RefreshTokenGuard.html":{},"injectables/RefreshTokenStrategy.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["injectables",{"_index":2,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"injectables/RefreshTokenGuard.html":{},"injectables/RefreshTokenStrategy.html":{},"injectables/UserService.html":{},"overview.html":{}}}],["injectrepository",{"_index":343,"title":{},"body":{"injectables/UserService.html":{}}}],["injectrepository(user",{"_index":346,"title":{},"body":{"injectables/UserService.html":{}}}],["installation",{"_index":484,"title":{},"body":{"index.html":{}}}],["installrunning",{"_index":486,"title":{},"body":{"index.html":{}}}],["interface",{"_index":62,"title":{"interfaces/JwtPayload.html":{}},"body":{"injectables/AccessTokenStrategy.html":{},"interfaces/JwtPayload.html":{},"coverage.html":{},"overview.html":{}}}],["interfaces",{"_index":109,"title":{},"body":{"interfaces/JwtPayload.html":{}}}],["isemail",{"_index":118,"title":{},"body":{"classes/LoginDto.html":{},"classes/RegisterDto.html":{}}}],["isnotempty",{"_index":119,"title":{},"body":{"classes/LoginDto.html":{},"classes/RegisterDto.html":{}}}],["ispublic",{"_index":37,"title":{},"body":{"injectables/AccessTokenGuard.html":{}}}],["isstring",{"_index":120,"title":{},"body":{"classes/LoginDto.html":{},"classes/RegisterDto.html":{}}}],["isstring()@isemail()@isnotempty",{"_index":114,"title":{},"body":{"classes/LoginDto.html":{},"classes/RegisterDto.html":{}}}],["isstring()@minlength(12",{"_index":116,"title":{},"body":{"classes/LoginDto.html":{}}}],["isstring()@minlength(12)@isnotempty",{"_index":143,"title":{},"body":{"classes/RegisterDto.html":{}}}],["jk;xkk6$/7u!g}@7*~ud$edl,5wy+e!egshs5%?\"qadxm@m3):nze8/s~m%wr'7%xxc=v9$ag#23fe59bafc89daf4eba0d84585a2090976efac9fee0e3d1b91324a89b1d33e6a96cc5904ddddeb4d1b58ce0f549cbc52f0227a28833652c0cf1342482583adc9q3%a^d!]w9z/3wt,%f*$)xj}r",{"_index":61,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"interfaces/JwtPayload.html":{},"miscellaneous/variables.html":{}}}],["join",{"_index":513,"title":{},"body":{"index.html":{}}}],["join(process.cwd",{"_index":100,"title":{},"body":{"modules/AppModule.html":{}}}],["jwt",{"_index":58,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"interfaces/JwtPayload.html":{},"injectables/RefreshTokenStrategy.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["jwt_access_token",{"_index":411,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["jwt_access_token_secret",{"_index":59,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"interfaces/JwtPayload.html":{},"injectables/UserService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["jwt_refresh_token_secret",{"_index":136,"title":{},"body":{"injectables/RefreshTokenStrategy.html":{},"injectables/UserService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["jwtfromrequest",{"_index":67,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"interfaces/JwtPayload.html":{}}}],["jwtmodule",{"_index":268,"title":{},"body":{"modules/UserModule.html":{}}}],["jwtmodule.register",{"_index":271,"title":{},"body":{"modules/UserModule.html":{}}}],["jwtpayload",{"_index":51,"title":{"interfaces/JwtPayload.html":{}},"body":{"injectables/AccessTokenStrategy.html":{},"interfaces/JwtPayload.html":{},"coverage.html":{}}}],["jwtservice",{"_index":299,"title":{},"body":{"injectables/UserService.html":{}}}],["kafka_service",{"_index":274,"title":{},"body":{"modules/UserModule.html":{}}}],["kafkajs",{"_index":454,"title":{},"body":{"dependencies.html":{}}}],["kamil",{"_index":521,"title":{},"body":{"index.html":{}}}],["license",{"_index":527,"title":{},"body":{"index.html":{},"properties.html":{}}}],["licensed",{"_index":503,"title":{},"body":{"index.html":{}}}],["link",{"_index":336,"title":{},"body":{"injectables/UserService.html":{}}}],["literal",{"_index":543,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["logging",{"_index":95,"title":{},"body":{"modules/AppModule.html":{}}}],["login",{"_index":196,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["login(@body",{"_index":239,"title":{},"body":{"controllers/UserController.html":{}}}],["login(body",{"_index":201,"title":{},"body":{"controllers/UserController.html":{}}}],["login(logindto",{"_index":309,"title":{},"body":{"injectables/UserService.html":{}}}],["logindto",{"_index":111,"title":{"classes/LoginDto.html":{}},"body":{"classes/LoginDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["logindto.email",{"_index":381,"title":{},"body":{"injectables/UserService.html":{}}}],["logout",{"_index":197,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["logout(@getcurrentuser('sub",{"_index":243,"title":{},"body":{"controllers/UserController.html":{}}}],["logout(userid",{"_index":206,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["match",{"_index":366,"title":{},"body":{"injectables/UserService.html":{}}}],["matching",{"_index":45,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"modules/AppModule.html":{},"classes/CreateUserDto.html":{},"interfaces/JwtPayload.html":{},"classes/LoginDto.html":{},"injectables/RefreshTokenGuard.html":{},"injectables/RefreshTokenStrategy.html":{},"classes/RegisterDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["mechanism",{"_index":284,"title":{},"body":{"modules/UserModule.html":{}}}],["messagepattern('createuser",{"_index":254,"title":{},"body":{"controllers/UserController.html":{}}}],["messagepattern('updateuser",{"_index":257,"title":{},"body":{"controllers/UserController.html":{}}}],["metadata",{"_index":461,"title":{},"body":{"dependencies.html":{}}}],["methods",{"_index":8,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"injectables/RefreshTokenStrategy.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["minlength",{"_index":121,"title":{},"body":{"classes/LoginDto.html":{},"classes/RegisterDto.html":{}}}],["minlength(12",{"_index":123,"title":{},"body":{"classes/LoginDto.html":{},"classes/RegisterDto.html":{}}}],["minutes",{"_index":357,"title":{},"body":{"injectables/UserService.html":{}}}],["miscellaneous",{"_index":468,"title":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":502,"title":{},"body":{"index.html":{}}}],["mode",{"_index":492,"title":{},"body":{"index.html":{}}}],["module",{"_index":70,"title":{"modules/AppModule.html":{},"modules/UserModule.html":{}},"body":{"modules/AppModule.html":{},"modules/UserModule.html":{}}}],["modules",{"_index":72,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["more",{"_index":516,"title":{},"body":{"index.html":{}}}],["myśliwiec",{"_index":522,"title":{},"body":{"index.html":{}}}],["name",{"_index":17,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"injectables/RefreshTokenStrategy.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["nest",{"_index":481,"title":{},"body":{"index.html":{}}}],["nestframework",{"_index":526,"title":{},"body":{"index.html":{}}}],["nestjs",{"_index":428,"title":{},"body":{"dependencies.html":{}}}],["nestjs/apollo",{"_index":433,"title":{},"body":{"dependencies.html":{}}}],["nestjs/common",{"_index":26,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"modules/AppModule.html":{},"interfaces/JwtPayload.html":{},"injectables/RefreshTokenGuard.html":{},"injectables/RefreshTokenStrategy.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":27,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"modules/AppModule.html":{},"dependencies.html":{}}}],["nestjs/graphql",{"_index":437,"title":{},"body":{"dependencies.html":{}}}],["nestjs/jwt",{"_index":269,"title":{},"body":{"modules/UserModule.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["nestjs/mapped",{"_index":152,"title":{},"body":{"classes/UpdateUserDto.html":{},"dependencies.html":{}}}],["nestjs/microservices",{"_index":266,"title":{},"body":{"modules/UserModule.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["nestjs/passport",{"_index":29,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"interfaces/JwtPayload.html":{},"injectables/RefreshTokenGuard.html":{},"injectables/RefreshTokenStrategy.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":439,"title":{},"body":{"dependencies.html":{}}}],["nestjs/typeorm",{"_index":83,"title":{},"body":{"modules/AppModule.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["new",{"_index":305,"title":{},"body":{"injectables/UserService.html":{},"coverage.html":{}}}],["newuser",{"_index":368,"title":{},"body":{"injectables/UserService.html":{}}}],["newuser.email",{"_index":371,"title":{},"body":{"injectables/UserService.html":{}}}],["node.js",{"_index":474,"title":{},"body":{"index.html":{}}}],["notfoundexception",{"_index":342,"title":{},"body":{"injectables/UserService.html":{}}}],["notfoundexception('invalid",{"_index":384,"title":{},"body":{"injectables/UserService.html":{}}}],["npm",{"_index":485,"title":{},"body":{"index.html":{}}}],["null",{"_index":392,"title":{},"body":{"injectables/UserService.html":{}}}],["nullable",{"_index":190,"title":{},"body":{"entities/User.html":{}}}],["number",{"_index":149,"title":{},"body":{"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["object",{"_index":307,"title":{},"body":{"injectables/UserService.html":{}}}],["onupdate",{"_index":179,"title":{},"body":{"entities/User.html":{}}}],["open",{"_index":504,"title":{},"body":{"index.html":{}}}],["optional",{"_index":19,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"injectables/RefreshTokenStrategy.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["options",{"_index":276,"title":{},"body":{"modules/UserModule.html":{}}}],["out",{"_index":79,"title":{},"body":{"modules/AppModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["overview",{"_index":531,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":423,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["param",{"_index":245,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["parameters",{"_index":15,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"injectables/RefreshTokenStrategy.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["partialtype",{"_index":151,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["partialtype(createuserdto",{"_index":156,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["passport",{"_index":57,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"interfaces/JwtPayload.html":{},"injectables/RefreshTokenStrategy.html":{},"dependencies.html":{}}}],["passportstrategy",{"_index":54,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"interfaces/JwtPayload.html":{},"injectables/RefreshTokenStrategy.html":{}}}],["passportstrategy(strategy",{"_index":66,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"interfaces/JwtPayload.html":{}}}],["password",{"_index":92,"title":{},"body":{"modules/AppModule.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"entities/User.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["password_confirm",{"_index":141,"title":{},"body":{"classes/RegisterDto.html":{},"injectables/UserService.html":{}}}],["payload",{"_index":53,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"interfaces/JwtPayload.html":{},"injectables/RefreshTokenStrategy.html":{}}}],["pg",{"_index":458,"title":{},"body":{"dependencies.html":{}}}],["pkc",{"_index":279,"title":{},"body":{"modules/UserModule.html":{}}}],["plain",{"_index":285,"title":{},"body":{"modules/UserModule.html":{}}}],["please",{"_index":514,"title":{},"body":{"index.html":{}}}],["post",{"_index":222,"title":{},"body":{"controllers/UserController.html":{}}}],["post('/local/login",{"_index":237,"title":{},"body":{"controllers/UserController.html":{}}}],["post('/local/logout",{"_index":242,"title":{},"body":{"controllers/UserController.html":{}}}],["post('/local/refresh",{"_index":247,"title":{},"body":{"controllers/UserController.html":{}}}],["post('/local/register",{"_index":233,"title":{},"body":{"controllers/UserController.html":{}}}],["postgres",{"_index":88,"title":{},"body":{"modules/AppModule.html":{}}}],["pp6wewyoyyz35h3v",{"_index":286,"title":{},"body":{"modules/UserModule.html":{}}}],["primarygeneratedcolumn",{"_index":174,"title":{},"body":{"entities/User.html":{}}}],["private",{"_index":289,"title":{},"body":{"injectables/UserService.html":{}}}],["production",{"_index":494,"title":{},"body":{"index.html":{}}}],["progressive",{"_index":473,"title":{},"body":{"index.html":{}}}],["project",{"_index":505,"title":{},"body":{"index.html":{}}}],["promise",{"_index":205,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["promise.all",{"_index":351,"title":{},"body":{"injectables/UserService.html":{}}}],["properties",{"_index":110,"title":{"properties.html":{}},"body":{"interfaces/JwtPayload.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"properties.html":{}}}],["provide",{"_index":103,"title":{},"body":{"modules/AppModule.html":{}}}],["provided",{"_index":322,"title":{},"body":{"injectables/UserService.html":{}}}],["providers",{"_index":102,"title":{},"body":{"modules/AppModule.html":{},"modules/UserModule.html":{}}}],["public",{"_index":231,"title":{},"body":{"controllers/UserController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["public()@post('/local/login')@httpcode(httpstatus.ok",{"_index":202,"title":{},"body":{"controllers/UserController.html":{}}}],["public()@post('/local/register')@httpcode(httpstatus.created",{"_index":218,"title":{},"body":{"controllers/UserController.html":{}}}],["public()@useguards(refreshtokenguard)@post('/local/refresh')@httpcode(httpstatus.ok",{"_index":212,"title":{},"body":{"controllers/UserController.html":{}}}],["query/core",{"_index":429,"title":{},"body":{"dependencies.html":{}}}],["query/query",{"_index":431,"title":{},"body":{"dependencies.html":{}}}],["read",{"_index":515,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":232,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["reflect",{"_index":460,"title":{},"body":{"dependencies.html":{}}}],["reflector",{"_index":12,"title":{},"body":{"injectables/AccessTokenGuard.html":{}}}],["refresh",{"_index":127,"title":{},"body":{"injectables/RefreshTokenGuard.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["refresh(userid",{"_index":210,"title":{},"body":{"controllers/UserController.html":{}}}],["refresh_token",{"_index":350,"title":{},"body":{"injectables/UserService.html":{}}}],["refreshtoken",{"_index":211,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["refreshtokenguard",{"_index":124,"title":{"injectables/RefreshTokenGuard.html":{}},"body":{"injectables/RefreshTokenGuard.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["refreshtokens",{"_index":292,"title":{},"body":{"injectables/UserService.html":{}}}],["refreshtokens(userid",{"_index":320,"title":{},"body":{"injectables/UserService.html":{}}}],["refreshtokenstrategy",{"_index":128,"title":{"injectables/RefreshTokenStrategy.html":{}},"body":{"injectables/RefreshTokenStrategy.html":{},"modules/UserModule.html":{},"coverage.html":{},"overview.html":{}}}],["register",{"_index":198,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["register(@body",{"_index":235,"title":{},"body":{"controllers/UserController.html":{}}}],["register(body",{"_index":217,"title":{},"body":{"controllers/UserController.html":{}}}],["register(registerdto",{"_index":325,"title":{},"body":{"injectables/UserService.html":{}}}],["registerdto",{"_index":139,"title":{"classes/RegisterDto.html":{}},"body":{"classes/RegisterDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["registerdto.email",{"_index":376,"title":{},"body":{"injectables/UserService.html":{}}}],["remove",{"_index":252,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["repository",{"_index":298,"title":{},"body":{"injectables/UserService.html":{},"index.html":{}}}],["represents",{"_index":308,"title":{},"body":{"injectables/UserService.html":{}}}],["req",{"_index":134,"title":{},"body":{"injectables/RefreshTokenStrategy.html":{},"miscellaneous/variables.html":{}}}],["req.user",{"_index":555,"title":{},"body":{"miscellaneous/variables.html":{}}}],["req.user[data",{"_index":556,"title":{},"body":{"miscellaneous/variables.html":{}}}],["request",{"_index":132,"title":{},"body":{"injectables/RefreshTokenStrategy.html":{}}}],["reset",{"_index":78,"title":{},"body":{"modules/AppModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["results",{"_index":44,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"modules/AppModule.html":{},"classes/CreateUserDto.html":{},"interfaces/JwtPayload.html":{},"classes/LoginDto.html":{},"injectables/RefreshTokenGuard.html":{},"injectables/RefreshTokenStrategy.html":{},"classes/RegisterDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":41,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"interfaces/JwtPayload.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["returns",{"_index":24,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"injectables/RefreshTokenStrategy.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["rimraf",{"_index":463,"title":{},"body":{"dependencies.html":{}}}],["run",{"_index":489,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":465,"title":{},"body":{"dependencies.html":{}}}],["sasl",{"_index":283,"title":{},"body":{"modules/UserModule.html":{}}}],["scalable",{"_index":478,"title":{},"body":{"index.html":{}}}],["secret",{"_index":353,"title":{},"body":{"injectables/UserService.html":{}}}],["secretorkey",{"_index":69,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"interfaces/JwtPayload.html":{}}}],["send",{"_index":331,"title":{},"body":{"injectables/UserService.html":{}}}],["sendemail",{"_index":293,"title":{},"body":{"injectables/UserService.html":{}}}],["sendemail(sendemailoptions",{"_index":328,"title":{},"body":{"injectables/UserService.html":{}}}],["sendemailoptions",{"_index":334,"title":{},"body":{"injectables/UserService.html":{}}}],["server",{"_index":442,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["service",{"_index":399,"title":{},"body":{"injectables/UserService.html":{}}}],["set",{"_index":391,"title":{},"body":{"injectables/UserService.html":{}}}],["setmetadata('ispublic",{"_index":559,"title":{},"body":{"miscellaneous/variables.html":{}}}],["side",{"_index":479,"title":{},"body":{"index.html":{}}}],["source",{"_index":4,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"modules/AppModule.html":{},"classes/CreateUserDto.html":{},"interfaces/JwtPayload.html":{},"classes/LoginDto.html":{},"injectables/RefreshTokenGuard.html":{},"injectables/RefreshTokenStrategy.html":{},"classes/RegisterDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"index.html":{}}}],["sponsors",{"_index":508,"title":{},"body":{"index.html":{}}}],["src/.../accesstoken.strategy.ts",{"_index":547,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../email.type.ts",{"_index":541,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../getcurrentuser.decorator.ts",{"_index":546,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../main.ts",{"_index":470,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/.../public.decorator.ts",{"_index":549,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../refreshtoken.strategy.ts",{"_index":548,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../tokens.type.ts",{"_index":540,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/app.module.ts",{"_index":80,"title":{},"body":{"modules/AppModule.html":{}}}],["src/auth.schema.gql",{"_index":101,"title":{},"body":{"modules/AppModule.html":{}}}],["src/main.ts",{"_index":405,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/user/decorators/getcurrentuser.decorator.ts",{"_index":412,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/user/decorators/public.decorator.ts",{"_index":413,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/user/dto/create",{"_index":107,"title":{},"body":{"classes/CreateUserDto.html":{},"coverage.html":{}}}],["src/user/dto/login.dto.ts",{"_index":112,"title":{},"body":{"classes/LoginDto.html":{},"coverage.html":{}}}],["src/user/dto/login.dto.ts:11",{"_index":117,"title":{},"body":{"classes/LoginDto.html":{}}}],["src/user/dto/login.dto.ts:7",{"_index":115,"title":{},"body":{"classes/LoginDto.html":{}}}],["src/user/dto/register.dto.ts",{"_index":140,"title":{},"body":{"classes/RegisterDto.html":{},"coverage.html":{}}}],["src/user/dto/register.dto.ts:12",{"_index":144,"title":{},"body":{"classes/RegisterDto.html":{}}}],["src/user/dto/register.dto.ts:17",{"_index":145,"title":{},"body":{"classes/RegisterDto.html":{}}}],["src/user/dto/register.dto.ts:7",{"_index":142,"title":{},"body":{"classes/RegisterDto.html":{}}}],["src/user/dto/update",{"_index":147,"title":{},"body":{"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["src/user/entities/user.entity.ts",{"_index":160,"title":{},"body":{"entities/User.html":{},"coverage.html":{}}}],["src/user/entities/user.entity.ts:13",{"_index":175,"title":{},"body":{"entities/User.html":{}}}],["src/user/entities/user.entity.ts:16",{"_index":171,"title":{},"body":{"entities/User.html":{}}}],["src/user/entities/user.entity.ts:21",{"_index":177,"title":{},"body":{"entities/User.html":{}}}],["src/user/entities/user.entity.ts:24",{"_index":173,"title":{},"body":{"entities/User.html":{}}}],["src/user/entities/user.entity.ts:30",{"_index":169,"title":{},"body":{"entities/User.html":{}}}],["src/user/entities/user.entity.ts:37",{"_index":180,"title":{},"body":{"entities/User.html":{}}}],["src/user/guards/accesstoken.guard.ts",{"_index":6,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"coverage.html":{}}}],["src/user/guards/accesstoken.guard.ts:11",{"_index":22,"title":{},"body":{"injectables/AccessTokenGuard.html":{}}}],["src/user/guards/accesstoken.guard.ts:6",{"_index":14,"title":{},"body":{"injectables/AccessTokenGuard.html":{}}}],["src/user/guards/refreshtoken.guard.ts",{"_index":125,"title":{},"body":{"injectables/RefreshTokenGuard.html":{},"coverage.html":{}}}],["src/user/guards/refreshtoken.guard.ts:5",{"_index":126,"title":{},"body":{"injectables/RefreshTokenGuard.html":{}}}],["src/user/strategies/accesstoken.strategy.ts",{"_index":47,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"interfaces/JwtPayload.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/user/strategies/accesstoken.strategy.ts:13",{"_index":49,"title":{},"body":{"injectables/AccessTokenStrategy.html":{}}}],["src/user/strategies/accesstoken.strategy.ts:21",{"_index":52,"title":{},"body":{"injectables/AccessTokenStrategy.html":{}}}],["src/user/strategies/refreshtoken.strategy.ts",{"_index":129,"title":{},"body":{"injectables/RefreshTokenStrategy.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/user/strategies/refreshtoken.strategy.ts:12",{"_index":130,"title":{},"body":{"injectables/RefreshTokenStrategy.html":{}}}],["src/user/strategies/refreshtoken.strategy.ts:21",{"_index":133,"title":{},"body":{"injectables/RefreshTokenStrategy.html":{}}}],["src/user/types/email.type.ts",{"_index":544,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/user/types/tokens.type.ts",{"_index":542,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/user/user.controller.ts",{"_index":194,"title":{},"body":{"controllers/UserController.html":{},"coverage.html":{}}}],["src/user/user.controller.ts:24",{"_index":219,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:31",{"_index":203,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:38",{"_index":208,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:51",{"_index":213,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:60",{"_index":200,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.module.ts",{"_index":262,"title":{},"body":{"modules/UserModule.html":{}}}],["src/user/user.service.ts",{"_index":288,"title":{},"body":{"injectables/UserService.html":{},"coverage.html":{}}}],["src/user/user.service.ts:110",{"_index":310,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:125",{"_index":318,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:141",{"_index":321,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:156",{"_index":301,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:24",{"_index":300,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:35",{"_index":330,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:45",{"_index":303,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:67",{"_index":338,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:82",{"_index":326,"title":{},"body":{"injectables/UserService.html":{}}}],["ssl",{"_index":282,"title":{},"body":{"modules/UserModule.html":{}}}],["start",{"_index":490,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":493,"title":{},"body":{"index.html":{}}}],["start:prodtest",{"_index":495,"title":{},"body":{"index.html":{}}}],["started",{"_index":472,"title":{"index.html":{}},"body":{}}],["starter",{"_index":483,"title":{},"body":{"index.html":{}}}],["statements",{"_index":404,"title":{},"body":{"coverage.html":{}}}],["stay",{"_index":518,"title":{},"body":{"index.html":{}}}],["strategies",{"_index":270,"title":{},"body":{"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["strategy",{"_index":56,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"interfaces/JwtPayload.html":{},"injectables/RefreshTokenStrategy.html":{}}}],["string",{"_index":64,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"interfaces/JwtPayload.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["sub",{"_index":63,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"interfaces/JwtPayload.html":{},"injectables/UserService.html":{}}}],["subject",{"_index":335,"title":{},"body":{"injectables/UserService.html":{}}}],["subscriptions",{"_index":453,"title":{},"body":{"dependencies.html":{}}}],["success",{"_index":317,"title":{},"body":{"injectables/UserService.html":{}}}],["such",{"_index":313,"title":{},"body":{"injectables/UserService.html":{}}}],["super",{"_index":35,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"interfaces/JwtPayload.html":{},"injectables/RefreshTokenGuard.html":{}}}],["super.canactivate(context",{"_index":43,"title":{},"body":{"injectables/AccessTokenGuard.html":{}}}],["support",{"_index":509,"title":{},"body":{"index.html":{},"modules.html":{}}}],["svg",{"_index":529,"title":{},"body":{"modules.html":{}}}],["synchronize",{"_index":94,"title":{},"body":{"modules/AppModule.html":{}}}],["table",{"_index":422,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":421,"title":{},"body":{"coverage.html":{}}}],["test",{"_index":498,"title":{},"body":{"index.html":{}}}],["test:covsupport",{"_index":501,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":500,"title":{},"body":{"index.html":{}}}],["tests",{"_index":497,"title":{},"body":{"index.html":{}}}],["thanks",{"_index":507,"title":{},"body":{"index.html":{}}}],["this.clientkafka.emit('default",{"_index":348,"title":{},"body":{"injectables/UserService.html":{}}}],["this.gettokens(newuser.id.tostring",{"_index":370,"title":{},"body":{"injectables/UserService.html":{}}}],["this.gettokens(user.id.tostring",{"_index":386,"title":{},"body":{"injectables/UserService.html":{}}}],["this.jwtservice.signasync",{"_index":352,"title":{},"body":{"injectables/UserService.html":{}}}],["this.reflector.getallandoverride('ispublic",{"_index":38,"title":{},"body":{"injectables/AccessTokenGuard.html":{}}}],["this.sendemail",{"_index":374,"title":{},"body":{"injectables/UserService.html":{}}}],["this.updaterefreshtokenhash(newuser.id",{"_index":372,"title":{},"body":{"injectables/UserService.html":{}}}],["this.updaterefreshtokenhash(user.id",{"_index":388,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userrepository",{"_index":389,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userrepository.find",{"_index":400,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userrepository.findoneby",{"_index":380,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userrepository.save",{"_index":369,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userrepository.update(userid",{"_index":363,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userservice.create(createuserdto",{"_index":256,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.findall",{"_index":253,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.login(body",{"_index":240,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.logout(userid",{"_index":244,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.refreshtokens(userid",{"_index":250,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.register(body",{"_index":236,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.update(updateuserdto.id",{"_index":259,"title":{},"body":{"controllers/UserController.html":{}}}],["throw",{"_index":364,"title":{},"body":{"injectables/UserService.html":{}}}],["timestamp",{"_index":166,"title":{},"body":{"entities/User.html":{}}}],["todo",{"_index":251,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["token",{"_index":215,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["tokens",{"_index":228,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{},"miscellaneous/typealiases.html":{}}}],["tokens.refresh_token",{"_index":373,"title":{},"body":{"injectables/UserService.html":{}}}],["touch",{"_index":519,"title":{},"body":{"index.html":{}}}],["transformer",{"_index":186,"title":{},"body":{"entities/User.html":{},"dependencies.html":{}}}],["transport",{"_index":265,"title":{},"body":{"modules/UserModule.html":{}}}],["transport.kafka",{"_index":275,"title":{},"body":{"modules/UserModule.html":{}}}],["true",{"_index":42,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"modules/AppModule.html":{},"entities/User.html":{},"modules/UserModule.html":{},"miscellaneous/variables.html":{}}}],["twitter",{"_index":525,"title":{},"body":{"index.html":{}}}],["type",{"_index":18,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"modules/AppModule.html":{},"interfaces/JwtPayload.html":{},"classes/LoginDto.html":{},"injectables/RefreshTokenStrategy.html":{},"classes/RegisterDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["typealiases",{"_index":538,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typeorm",{"_index":184,"title":{},"body":{"entities/User.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["typeormmodule",{"_index":82,"title":{},"body":{"modules/AppModule.html":{},"modules/UserModule.html":{}}}],["typeormmodule.forfeature([user",{"_index":272,"title":{},"body":{"modules/UserModule.html":{}}}],["typeormmodule.forroot",{"_index":87,"title":{},"body":{"modules/AppModule.html":{}}}],["types",{"_index":153,"title":{},"body":{"classes/UpdateUserDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["typescript",{"_index":482,"title":{},"body":{"index.html":{}}}],["undefined",{"_index":553,"title":{},"body":{"miscellaneous/variables.html":{}}}],["unique",{"_index":188,"title":{},"body":{"entities/User.html":{}}}],["unit",{"_index":496,"title":{},"body":{"index.html":{}}}],["unlicensed",{"_index":537,"title":{},"body":{"properties.html":{}}}],["update",{"_index":216,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["update(@payload",{"_index":258,"title":{},"body":{"controllers/UserController.html":{}}}],["updated_at",{"_index":163,"title":{},"body":{"entities/User.html":{}}}],["updatedatecolumn",{"_index":183,"title":{},"body":{"entities/User.html":{}}}],["updatedatecolumn({type",{"_index":178,"title":{},"body":{"entities/User.html":{}}}],["updaterefreshtokenhash",{"_index":294,"title":{},"body":{"injectables/UserService.html":{}}}],["updaterefreshtokenhash(userid",{"_index":337,"title":{},"body":{"injectables/UserService.html":{}}}],["updateuserdto",{"_index":146,"title":{"classes/UpdateUserDto.html":{}},"body":{"classes/UpdateUserDto.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["useclass",{"_index":104,"title":{},"body":{"modules/AppModule.html":{}}}],["useguards",{"_index":223,"title":{},"body":{"controllers/UserController.html":{}}}],["useguards(accesstokenguard",{"_index":241,"title":{},"body":{"controllers/UserController.html":{}}}],["useguards(accesstokenguard)@post('/local/logout')@httpcode(httpstatus.ok",{"_index":207,"title":{},"body":{"controllers/UserController.html":{}}}],["useguards(refreshtokenguard",{"_index":246,"title":{},"body":{"controllers/UserController.html":{}}}],["user",{"_index":158,"title":{"entities/User.html":{}},"body":{"entities/User.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["user.controller",{"_index":263,"title":{},"body":{"modules/UserModule.html":{}}}],["user.dto",{"_index":155,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["user.dto.ts",{"_index":108,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["user.dto.ts:5",{"_index":150,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["user.email",{"_index":387,"title":{},"body":{"injectables/UserService.html":{}}}],["user.hashed_refresh_token",{"_index":395,"title":{},"body":{"injectables/UserService.html":{}}}],["user.password",{"_index":383,"title":{},"body":{"injectables/UserService.html":{}}}],["user.service",{"_index":225,"title":{},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{}}}],["user/guards",{"_index":86,"title":{},"body":{"modules/AppModule.html":{}}}],["user/user.module",{"_index":85,"title":{},"body":{"modules/AppModule.html":{}}}],["usercontroller",{"_index":192,"title":{"controllers/UserController.html":{}},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{},"coverage.html":{}}}],["userid",{"_index":209,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["usermodule",{"_index":76,"title":{"modules/UserModule.html":{}},"body":{"modules/AppModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["username",{"_index":91,"title":{},"body":{"modules/AppModule.html":{},"modules/UserModule.html":{}}}],["userrepository",{"_index":297,"title":{},"body":{"injectables/UserService.html":{}}}],["userservice",{"_index":224,"title":{"injectables/UserService.html":{}},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"overview.html":{}}}],["validate",{"_index":48,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"injectables/RefreshTokenStrategy.html":{}}}],["validate(payload",{"_index":50,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"interfaces/JwtPayload.html":{}}}],["validate(req",{"_index":131,"title":{},"body":{"injectables/RefreshTokenStrategy.html":{}}}],["validator",{"_index":122,"title":{},"body":{"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"dependencies.html":{}}}],["value",{"_index":550,"title":{},"body":{"miscellaneous/variables.html":{}}}],["variable",{"_index":410,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":545,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["verify",{"_index":333,"title":{},"body":{"injectables/UserService.html":{}}}],["verifyemail",{"_index":329,"title":{},"body":{"injectables/UserService.html":{},"miscellaneous/typealiases.html":{}}}],["version",{"_index":535,"title":{},"body":{"properties.html":{}}}],["void",{"_index":319,"title":{},"body":{"injectables/UserService.html":{}}}],["watch",{"_index":491,"title":{},"body":{"index.html":{}}}],["website",{"_index":523,"title":{},"body":{"index.html":{}}}],["west3.gcp.confluent.cloud:9092",{"_index":281,"title":{},"body":{"modules/UserModule.html":{}}}],["you'd",{"_index":512,"title":{},"body":{"index.html":{}}}],["zoom",{"_index":77,"title":{},"body":{"modules/AppModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"injectables/AccessTokenGuard.html":{"url":"injectables/AccessTokenGuard.html","title":"injectable - AccessTokenGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AccessTokenGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/guards/accessToken.guard.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector)\n                    \n                \n                        \n                            \n                                Defined in src/user/guards/accessToken.guard.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canActivate\n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in src/user/guards/accessToken.guard.ts:11\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ExecutionContext, Injectable } from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\nimport { AuthGuard } from '@nestjs/passport';\n\n@Injectable()\nexport class AccessTokenGuard extends AuthGuard('jwt') {\n  constructor(private reflector: Reflector) {\n    super();\n  }\n\n  canActivate(context: ExecutionContext) {\n    const isPublic = this.reflector.getAllAndOverride('isPublic', [\n      context.getHandler(),\n      context.getClass(),\n    ]);\n    if (isPublic) return true;\n\n    return super.canActivate(context);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AccessTokenStrategy.html":{"url":"injectables/AccessTokenStrategy.html","title":"injectable - AccessTokenStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AccessTokenStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/strategies/accessToken.strategy.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/user/strategies/accessToken.strategy.ts:13\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        validate\n                        \n                    \n                \n            \n            \n                \nvalidate(payload: JwtPayload)\n                \n            \n\n\n            \n                \n                    Defined in src/user/strategies/accessToken.strategy.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                JwtPayload\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         JwtPayload\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { ExtractJwt, Strategy } from 'passport-jwt';\n\nexport const JWT_ACCESS_TOKEN_SECRET = `89bf192b2b6468668da83dff4f0bc2d17908644894327050-~[JK;XKk6$/7U!G}@7*~ud$EdL,5WY+e!eGSHs5%?\"qaDXM@m3):nZE8/S~M%Wr'7%XXc=v9$Ag#23fe59bafc89daf4eba0d84585a2090976efac9fee0e3d1b91324a89b1d33e6a96cc5904ddddeb4d1b58ce0f549cbc52f0227a28833652c0cf1342482583adc9q3%A^d!]w9Z/3wT,%F*$)xj}r`;\n\ninterface JwtPayload {\n  sub: string;\n  email: string;\n}\n\n@Injectable()\nexport class AccessTokenStrategy extends PassportStrategy(Strategy, 'jwt') {\n  constructor() {\n    super({\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n      secretOrKey: JWT_ACCESS_TOKEN_SECRET,\n    });\n  }\n\n  validate(payload: JwtPayload) {\n    return payload;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\n\nUserModule\n\nUserModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Imports\n                    \n                        \n                            UserModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { APP_GUARD } from '@nestjs/core';\nimport { UserModule } from './user/user.module';\nimport { AccessTokenGuard } from './user/guards';\n\n@Module({\n  imports: [\n    TypeOrmModule.forRoot({\n      type: 'postgres',\n      database: 'gettingstarted',\n      username: 'gettingstarted',\n      password: 'postgres',\n      autoLoadEntities: true,\n      synchronize: true,\n      logging: true,\n    }),\n    // GraphQLModule.forRoot({\n    //   driver: ApolloFederationDriver,\n    //   // autoSchemaFile: join(process.cwd(), 'src/auth.schema.gql'),\n    //   autoSchemaFile: true,\n    // }),\n\n    UserModule,\n  ],\n  providers: [\n    {\n      provide: APP_GUARD,\n      useClass: AccessTokenGuard,\n    },\n  ],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserDto.html":{"url":"classes/CreateUserDto.html","title":"class - CreateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/dto/create-user.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class CreateUserDto {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/JwtPayload.html":{"url":"interfaces/JwtPayload.html","title":"interface - JwtPayload","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  JwtPayload\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/strategies/accessToken.strategy.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            email\n                                        \n                                \n                                \n                                        \n                                            sub\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        email\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        email:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        sub\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        sub:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { ExtractJwt, Strategy } from 'passport-jwt';\n\nexport const JWT_ACCESS_TOKEN_SECRET = `89bf192b2b6468668da83dff4f0bc2d17908644894327050-~[JK;XKk6$/7U!G}@7*~ud$EdL,5WY+e!eGSHs5%?\"qaDXM@m3):nZE8/S~M%Wr'7%XXc=v9$Ag#23fe59bafc89daf4eba0d84585a2090976efac9fee0e3d1b91324a89b1d33e6a96cc5904ddddeb4d1b58ce0f549cbc52f0227a28833652c0cf1342482583adc9q3%A^d!]w9Z/3wT,%F*$)xj}r`;\n\ninterface JwtPayload {\n  sub: string;\n  email: string;\n}\n\n@Injectable()\nexport class AccessTokenStrategy extends PassportStrategy(Strategy, 'jwt') {\n  constructor() {\n    super({\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n      secretOrKey: JWT_ACCESS_TOKEN_SECRET,\n    });\n  }\n\n  validate(payload: JwtPayload) {\n    return payload;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoginDto.html":{"url":"classes/LoginDto.html","title":"class - LoginDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoginDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/dto/login.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsEmail()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dto/login.dto.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@MinLength(12)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dto/login.dto.ts:11\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEmail, IsNotEmpty, IsString, MinLength } from 'class-validator';\n\nexport class LoginDto {\n  @IsString()\n  @IsEmail()\n  @IsNotEmpty()\n  email: string;\n\n  @IsString()\n  @MinLength(12)\n  password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/RefreshTokenGuard.html":{"url":"injectables/RefreshTokenGuard.html","title":"injectable - RefreshTokenGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  RefreshTokenGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/guards/refreshToken.guard.ts\n        \n\n\n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/user/guards/refreshToken.guard.ts:5\n                            \n                        \n\n            \n        \n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\n\n@Injectable()\nexport class RefreshTokenGuard extends AuthGuard('jwt-refresh') {\n  constructor() {\n    super();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/RefreshTokenStrategy.html":{"url":"injectables/RefreshTokenStrategy.html","title":"injectable - RefreshTokenStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  RefreshTokenStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/strategies/refreshToken.strategy.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/user/strategies/refreshToken.strategy.ts:12\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        validate\n                        \n                    \n                \n            \n            \n                \nvalidate(req: Request, payload: any)\n                \n            \n\n\n            \n                \n                    Defined in src/user/strategies/refreshToken.strategy.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    payload\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { PassportStrategy } from '@nestjs/passport';\nimport { ExtractJwt, Strategy } from 'passport-jwt';\nimport { Request } from 'express';\nimport { Injectable } from '@nestjs/common';\n\nexport const JWT_REFRESH_TOKEN_SECRET = `bbb6891861a6d735a7e9649fd03f3ccc2f7f43b30db0b49f37f7ee732976bf591b774868082c2f665827932625c76bb5ac05bb91d080a25c7aef3c38ad471033D&Y2Kwkbvs9Q/=uUE,7hSB-5\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RegisterDto.html":{"url":"classes/RegisterDto.html","title":"class - RegisterDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RegisterDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/dto/register.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                password\n                            \n                            \n                                password_confirm\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsEmail()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dto/register.dto.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@MinLength(12)@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dto/register.dto.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password_confirm\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@MinLength(12)@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dto/register.dto.ts:17\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEmail, IsNotEmpty, IsString, MinLength } from 'class-validator';\n\nexport class RegisterDto {\n  @IsString()\n  @IsEmail()\n  @IsNotEmpty()\n  email: string;\n\n  @IsString()\n  @MinLength(12)\n  @IsNotEmpty()\n  password: string;\n\n  @IsString()\n  @MinLength(12)\n  @IsNotEmpty()\n  password_confirm: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateUserDto.html":{"url":"classes/UpdateUserDto.html","title":"class - UpdateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/dto/update-user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/user/dto/update-user.dto.ts:5\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/mapped-types';\nimport { CreateUserDto } from './create-user.dto';\n\nexport class UpdateUserDto extends PartialType(CreateUserDto) {\n  id: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/User.html":{"url":"entities/User.html","title":"entity - User","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/entities/user.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                created_at\n                            \n                            \n                                email\n                            \n                            \n                                hashed_refresh_token\n                            \n                            \n                                id\n                            \n                            \n                                password\n                            \n                            \n                                updated_at\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        created_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn({type: 'timestamp', default: () => CURRENT_TIMESTAMP(6)})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user.entity.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user.entity.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        hashed_refresh_token\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user.entity.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user.entity.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Exclude()@Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user.entity.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updated_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn({type: 'timestamp', default: () => CURRENT_TIMESTAMP(6), onUpdate: 'CURRENT_TIMESTAMP(6)'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user.entity.ts:37\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Column,\n  CreateDateColumn,\n  Entity,\n  PrimaryGeneratedColumn,\n  UpdateDateColumn,\n} from 'typeorm';\nimport { Exclude } from 'class-transformer';\n\n@Entity('users')\nexport class User {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column({ unique: true })\n  email: string;\n\n  @Exclude()\n  @Column()\n  // hashed password\n  password: string;\n\n  @Column({ nullable: true })\n  hashed_refresh_token: string;\n\n  @CreateDateColumn({\n    type: 'timestamp',\n    default: () => 'CURRENT_TIMESTAMP(6)',\n  })\n  created_at: Date;\n\n  @UpdateDateColumn({\n    type: 'timestamp',\n    default: () => 'CURRENT_TIMESTAMP(6)',\n    onUpdate: 'CURRENT_TIMESTAMP(6)',\n  })\n  updated_at: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UserController.html":{"url":"controllers/UserController.html","title":"controller - UserController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UserController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                findAll\n                            \n                            \n                                login\n                            \n                            \n                                logout\n                            \n                            \n                                refresh\n                            \n                            \n                                register\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        findAll\n                        \n                    \n                \n            \n            \n                \nfindAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/users')\n                \n            \n\n            \n                \n                    Defined in src/user/user.controller.ts:60\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        login\n                        \n                    \n                \n            \n            \n                \nlogin(body: LoginDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Public()@Post('/local/login')@HttpCode(HttpStatus.OK)\n                \n            \n\n            \n                \n                    Defined in src/user/user.controller.ts:31\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    body\n                                    \n                                                LoginDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        logout\n                        \n                    \n                \n            \n            \n                \nlogout(userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(AccessTokenGuard)@Post('/local/logout')@HttpCode(HttpStatus.OK)\n                \n            \n\n            \n                \n                    Defined in src/user/user.controller.ts:38\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        refresh\n                        \n                    \n                \n            \n            \n                \nrefresh(userId: number, refreshToken: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Public()@UseGuards(RefreshTokenGuard)@Post('/local/refresh')@HttpCode(HttpStatus.OK)\n                \n            \n\n            \n                \n                    Defined in src/user/user.controller.ts:51\n                \n            \n\n\n            \n                \n                    Refresh JWT access token from refresh JWT token. Update refresh JWT token .\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    refreshToken\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        JWT access token\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        register\n                        \n                    \n                \n            \n            \n                \nregister(body: RegisterDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Public()@Post('/local/register')@HttpCode(HttpStatus.CREATED)\n                \n            \n\n            \n                \n                    Defined in src/user/user.controller.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    body\n                                    \n                                                RegisterDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Get,\n  HttpCode,\n  HttpStatus,\n  Post,\n  UseGuards,\n} from '@nestjs/common';\nimport { UserService } from './user.service';\nimport { RegisterDto } from './dto/register.dto';\nimport { LoginDto } from './dto/login.dto';\nimport { Tokens } from './types';\nimport { AccessTokenGuard, RefreshTokenGuard } from './guards';\nimport { GetCurrentUser, Public } from './decorators';\n\n@Controller()\nexport class UserController {\n  constructor(private readonly userService: UserService) {}\n\n  @Public()\n  @Post('/local/register')\n  @HttpCode(HttpStatus.CREATED)\n  register(@Body() body: RegisterDto): Promise {\n    return this.userService.register(body);\n  }\n\n  @Public()\n  @Post('/local/login')\n  @HttpCode(HttpStatus.OK)\n  login(@Body() body: LoginDto): Promise {\n    return this.userService.login(body);\n  }\n\n  @UseGuards(AccessTokenGuard)\n  @Post('/local/logout')\n  @HttpCode(HttpStatus.OK)\n  logout(@GetCurrentUser('sub') userId: number) {\n    return this.userService.logout(userId);\n  }\n\n  /**\n   * Refresh JWT access token from refresh JWT token. Update refresh JWT token .\n   * @param body\n   * @returns JWT access token\n   */\n  @Public()\n  @UseGuards(RefreshTokenGuard)\n  @Post('/local/refresh')\n  @HttpCode(HttpStatus.OK)\n  refresh(\n    @GetCurrentUser('sub') userId: number,\n    @GetCurrentUser('refreshToken') refreshToken: string,\n  ) {\n    return this.userService.refreshTokens(userId, refreshToken);\n  }\n\n  // TODO: remove this controller\n  @Get('/users')\n  findAll() {\n    return this.userService.findAll();\n  }\n\n  // @MessagePattern('createUser')\n  // create(@Payload() createUserDto: CreateUserDto) {\n  //   return this.userService.create(createUserDto);\n  // }\n\n  // @MessagePattern('updateUser')\n  // update(@Payload() updateUserDto: UpdateUserDto) {\n  //   return this.userService.update(updateUserDto.id, updateUserDto);\n  // }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UserModule.html":{"url":"modules/UserModule.html","title":"module - UserModule","body":"\n                   \n\n\n\n\n    Modules\n    UserModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_UserModule\n\n\n\ncluster_UserModule_providers\n\n\n\n\nAccessTokenStrategy\n\nAccessTokenStrategy\n\n\n\nUserModule\n\nUserModule\n\nUserModule -->\n\nAccessTokenStrategy->UserModule\n\n\n\n\n\nRefreshTokenStrategy\n\nRefreshTokenStrategy\n\nUserModule -->\n\nRefreshTokenStrategy->UserModule\n\n\n\n\n\nUserService\n\nUserService\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/user/user.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AccessTokenStrategy\n                        \n                        \n                            RefreshTokenStrategy\n                        \n                        \n                            UserService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UserController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { UserService } from './user.service';\nimport { UserController } from './user.controller';\nimport { ClientsModule, Transport } from '@nestjs/microservices';\nimport { User } from './entities/user.entity';\nimport { TypeOrmModule } from '@nestjs/typeorm';\n\nimport { JwtModule } from '@nestjs/jwt';\nimport { AccessTokenStrategy, RefreshTokenStrategy } from './strategies';\n\n@Module({\n  imports: [\n    JwtModule.register({}),\n    TypeOrmModule.forFeature([User]),\n    ClientsModule.register([\n      {\n        name: 'KAFKA_SERVICE',\n        transport: Transport.KAFKA,\n        options: {\n          client: {\n            brokers: ['pkc-4ygn6.europe-west3.gcp.confluent.cloud:9092'],\n            ssl: true,\n            sasl: {\n              mechanism: 'plain',\n              username: 'PP6WEWYOYYZ35H3V',\n              password:\n                'g92IuFKUrDMCjl0Y/KcjYE4ndZB5GDgj+sZI0FAWAq5y7/5Vh54yek9IRwYVzR+/',\n            },\n          },\n        },\n      },\n    ]),\n  ],\n  controllers: [UserController],\n  providers: [UserService, RefreshTokenStrategy, AccessTokenStrategy],\n})\nexport class UserModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserService.html":{"url":"injectables/UserService.html","title":"injectable - UserService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UserService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                findAll\n                            \n                            \n                                    Private\n                                    Async\n                                getTokens\n                            \n                            \n                                    Async\n                                login\n                            \n                            \n                                    Async\n                                logout\n                            \n                            \n                                    Async\n                                refreshTokens\n                            \n                            \n                                    Async\n                                register\n                            \n                            \n                                    Private\n                                    Async\n                                sendEmail\n                            \n                            \n                                    Private\n                                    Async\n                                updateRefreshTokenHash\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(clientKafka: ClientKafka, userRepository: Repository, jwtService: JwtService)\n                    \n                \n                        \n                            \n                                Defined in src/user/user.service.ts:24\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        clientKafka\n                                                  \n                                                        \n                                                                    ClientKafka\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        findAll\n                        \n                    \n                \n            \n            \n                \nfindAll()\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:156\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        Async\n                        getTokens\n                        \n                    \n                \n            \n            \n                \n                    \n                    getTokens(userId: string, email: string)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:45\n                \n            \n\n\n            \n                \n                    Generate and return access and refresh new tokens\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nUser id\n\n\n                                    \n                                \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nUser email\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        Promise object represents access token and refresh token\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                    \n                    login(loginDto: LoginDto)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:110\n                \n            \n\n\n            \n                \n                    Checks if user exists in database with such email, encrypt password and compare with database hash. Return tokens if success\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    loginDto\n                                    \n                                                LoginDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nEmail and password\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        Promise object represents access token and refresh token\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        logout\n                        \n                    \n                \n            \n            \n                \n                    \n                    logout(userId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:125\n                \n            \n\n\n            \n                \n                    Logout user: remove hashed_refresh_token from database by user id\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nUser id\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        refreshTokens\n                        \n                    \n                \n            \n            \n                \n                    \n                    refreshTokens(userId: number, refreshToken: string)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:141\n                \n            \n\n\n            \n                \n                    Generate and return new access and refresh new tokens if refresh token was provided and user was found by id from JWT\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nUser id from JWT\n\n\n                                    \n                                \n                                \n                                    refreshToken\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nrefresh token which will be checked\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        Promise object represents access token and refresh token\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        register\n                        \n                    \n                \n            \n            \n                \n                    \n                    register(registerDto: RegisterDto)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:82\n                \n            \n\n\n            \n                \n                    Register new user account with access and refresh JWT strategies\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    registerDto\n                                    \n                                                RegisterDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nEmail, password and password_confirm\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        Promise object represents access token and refresh token\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        Async\n                        sendEmail\n                        \n                    \n                \n            \n            \n                \n                    \n                    sendEmail(sendEmailOptions: VerifyEmail)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:35\n                \n            \n\n\n            \n                \n                    Send confirmation on email to verify account\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    sendEmailOptions\n                                    \n                                                VerifyEmail\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nFrom, to, email subject, confirmation link\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        Async\n                        updateRefreshTokenHash\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateRefreshTokenHash(userId: number, refreshToken: string)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:67\n                \n            \n\n\n            \n                \n                    Hashed refresh token and update in database by user id\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nUser id\n\n\n                                    \n                                \n                                \n                                    refreshToken\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nRefresh token to hash\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  BadRequestException,\n  ForbiddenException,\n  Inject,\n  Injectable,\n  NotFoundException,\n} from '@nestjs/common';\nimport { ClientKafka } from '@nestjs/microservices';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { JwtService } from '@nestjs/jwt';\nimport * as bcrypt from 'bcrypt';\nimport { Repository } from 'typeorm';\nimport { LoginDto } from './dto/login.dto';\nimport { RegisterDto } from './dto/register.dto';\nimport { User } from './entities/user.entity';\n\nimport { Tokens, VerifyEmail } from './types';\nimport {\n  JWT_ACCESS_TOKEN_SECRET,\n  JWT_REFRESH_TOKEN_SECRET,\n} from './strategies';\n\n@Injectable()\nexport class UserService {\n  constructor(\n    @Inject('KAFKA_SERVICE') private clientKafka: ClientKafka,\n    @InjectRepository(User) private readonly userRepository: Repository,\n    private jwtService: JwtService,\n  ) {}\n\n  /**\n   * Send confirmation on email to verify account\n   * @param {VerifyEmail} sendEmailOptions - From, to, email subject, confirmation link\n   */\n  private async sendEmail(sendEmailOptions: VerifyEmail): Promise {\n    await this.clientKafka.emit('default', sendEmailOptions);\n  }\n\n  /**\n   * Generate and return access and refresh new tokens\n   * @param {string} userId - User id\n   * @param {string} email - User email\n   * @returns {Promise} Promise object represents access token and refresh token\n   */\n  private async getTokens(userId: string, email: string): Promise {\n    const [access_token, refresh_token] = await Promise.all([\n      this.jwtService.signAsync(\n        { sub: userId, email },\n        { secret: JWT_ACCESS_TOKEN_SECRET, expiresIn: 60 * 15 }, // 15 minutes\n      ),\n      this.jwtService.signAsync(\n        { sub: userId, email },\n        { secret: JWT_REFRESH_TOKEN_SECRET, expiresIn: 60 * 60 * 24 * 7 }, // 7 days\n      ),\n    ]);\n    return {\n      access_token,\n      refresh_token,\n    };\n  }\n\n  /**\n   * Hashed refresh token and update in database by user id\n   * @param {number} userId - User id\n   * @param {string} refreshToken - Refresh token to hash\n   */\n  private async updateRefreshTokenHash(\n    userId: number,\n    refreshToken: string,\n  ): Promise {\n    const hashed = await bcrypt.hash(refreshToken, 12);\n    await this.userRepository.update(userId, {\n      hashed_refresh_token: hashed,\n    });\n  }\n\n  /**\n   * Register new user account with access and refresh JWT strategies\n   * @param {RegisterDto} registerDto - Email, password and password_confirm\n   * @returns {Promise} Promise object represents access token and refresh token\n   */\n  async register(registerDto: RegisterDto): Promise {\n    const { password, password_confirm } = registerDto;\n    if (password !== password_confirm) {\n      throw new BadRequestException('Passwords do not match');\n    }\n    const hashed = await bcrypt.hash(password, 12);\n    const newUser = await this.userRepository.save({\n      ...registerDto,\n      password: hashed,\n    });\n    if (newUser) {\n      const tokens = await this.getTokens(newUser.id.toString(), newUser.email);\n      await this.updateRefreshTokenHash(newUser.id, tokens.refresh_token);\n      this.sendEmail({\n        from: 'Authentication',\n        to: registerDto.email,\n        subject: 'Confirm account',\n        confirmLink: 'http://google.com',\n      });\n      return tokens;\n    }\n  }\n\n  /**\n   * Checks if user exists in database with such email, encrypt password and compare with database hash. Return tokens if success\n   * @param {LoginDto} loginDto - Email and password\n   * @returns {Promise} Promise object represents access token and refresh token\n   */\n  async login(loginDto: LoginDto): Promise {\n    const user = await this.userRepository.findOneBy({ email: loginDto.email });\n    if (!user || !(await bcrypt.compare(loginDto.password, user.password))) {\n      throw new NotFoundException('Invalid credentials');\n    }\n    const tokens = await this.getTokens(user.id.toString(), user.email);\n    await this.updateRefreshTokenHash(user.id, tokens.refresh_token);\n    return tokens;\n  }\n\n  /**\n   * Logout user: remove hashed_refresh_token from database by user id\n   * @param {number} userId - User id\n   * @returns {Promise} void\n   */\n  async logout(userId: number): Promise {\n    await this.userRepository\n      .createQueryBuilder()\n      .update()\n      .set({ hashed_refresh_token: null })\n      .where({ id: userId })\n      .andWhere('hashed_refresh_token IS NOT NULL')\n      .execute();\n  }\n\n  /**\n   * Generate and return new access and refresh new tokens if refresh token was provided and user was found by id from JWT\n   * @param {number} userId - User id from JWT\n   * @param {string} refreshToken - refresh token which will be checked\n   * @returns {Promise} Promise object represents access token and refresh token\n   */\n  async refreshTokens(userId: number, refreshToken: string): Promise {\n    const user = await this.userRepository.findOneBy({ id: userId });\n    if (\n      !user ||\n      !user.hashed_refresh_token ||\n      !(await bcrypt.compare(refreshToken, user.hashed_refresh_token))\n    ) {\n      throw new ForbiddenException('Access denied');\n    }\n    const tokens = await this.getTokens(user.id.toString(), user.email);\n    await this.updateRefreshTokenHash(user.id, tokens.refresh_token);\n    return tokens;\n  }\n\n  // TODO: remove this controller and service\n  findAll() {\n    return this.userRepository.find();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            variable\n            JWT_ACCESS_TOKEN\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/user/decorators/getCurrentUser.decorator.ts\n            \n            variable\n            GetCurrentUser\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/user/decorators/public.decorator.ts\n            \n            variable\n            Public\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/user/dto/create-user.dto.ts\n            \n            class\n            CreateUserDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/user/dto/login.dto.ts\n            \n            class\n            LoginDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/user/dto/register.dto.ts\n            \n            class\n            RegisterDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/user/dto/update-user.dto.ts\n            \n            class\n            UpdateUserDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/user/entities/user.entity.ts\n            \n            entity\n            User\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/user/guards/accessToken.guard.ts\n            \n            injectable\n            AccessTokenGuard\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/user/guards/refreshToken.guard.ts\n            \n            injectable\n            RefreshTokenGuard\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/user/strategies/accessToken.strategy.ts\n            \n            injectable\n            AccessTokenStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/user/strategies/accessToken.strategy.ts\n            \n            interface\n            JwtPayload\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/user/strategies/accessToken.strategy.ts\n            \n            variable\n            JWT_ACCESS_TOKEN_SECRET\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/user/strategies/refreshToken.strategy.ts\n            \n            injectable\n            RefreshTokenStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/user/strategies/refreshToken.strategy.ts\n            \n            variable\n            JWT_REFRESH_TOKEN_SECRET\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/user/user.controller.ts\n            \n            controller\n            UserController\n            \n                16 %\n                (1/6)\n            \n        \n        \n            \n                \n                src/user/user.service.ts\n            \n            injectable\n            UserService\n            \n                70 %\n                (7/10)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @apollo/subgraph : ^0.4.0\n        \n            @compodoc/compodoc : ^1.1.19\n        \n            @nestjs-query/core : ^0.30.0\n        \n            @nestjs-query/query-graphql : ^0.30.0\n        \n            @nestjs-query/query-typeorm : ^0.30.0\n        \n            @nestjs/apollo : ^10.0.8\n        \n            @nestjs/common : ^8.4.3\n        \n            @nestjs/core : ^8.0.0\n        \n            @nestjs/graphql : ^10.0.8\n        \n            @nestjs/jwt : ^8.0.0\n        \n            @nestjs/mapped-types : *\n        \n            @nestjs/microservices : ^8.4.3\n        \n            @nestjs/passport : ^8.2.1\n        \n            @nestjs/platform-express : ^8.0.0\n        \n            @nestjs/typeorm : ^8.0.3\n        \n            apollo-server-core : ^3.6.7\n        \n            apollo-server-express : ^3.6.7\n        \n            bcrypt : ^5.0.1\n        \n            bcryptjs : ^2.4.3\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.13.2\n        \n            dataloader : ^2.0.0\n        \n            graphql : ^16.3.0\n        \n            graphql-subscriptions : ^2.0.0\n        \n            kafkajs : ^1.16.0\n        \n            passport : ^0.5.2\n        \n            passport-jwt : ^4.0.0\n        \n            pg : ^8.7.3\n        \n            reflect-metadata : ^0.1.13\n        \n            rimraf : ^3.0.2\n        \n            rxjs : ^7.2.0\n        \n            typeorm : ^0.3.5\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications.\n    \n\n\n\n\n\n\n\n\n  \n    \n  \n\n  \n\nDescription\nNest framework TypeScript starter repository.\nInstallation\n$ npm installRunning the app\n# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodTest\n# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:covSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nAuthor - Kamil Myśliwiec\nWebsite - https://nestjs.com\nTwitter - @nestframework\n\nLicense\nNest is MIT licensed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UserModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_UserModule\n\n\n\ncluster_UserModule_providers\n\n\n\n\nUserModule\n\nUserModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\nAccessTokenStrategy\n\nAccessTokenStrategy\n\nUserModule -->\n\nAccessTokenStrategy->UserModule\n\n\n\n\n\nRefreshTokenStrategy\n\nRefreshTokenStrategy\n\nUserModule -->\n\nRefreshTokenStrategy->UserModule\n\n\n\n\n\nUserService\n\nUserService\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        2 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    1 Controller\n                \n            \n        \n        \n            \n                \n                    \n                    1 Entities\n                \n            \n        \n        \n            \n                \n                    \n                    5 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    4 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    1 Interface\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            Tokens   (src/.../tokens.type.ts)\n                        \n                        \n                            VerifyEmail   (src/.../email.type.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/user/types/tokens.type.ts\n    \n    \n        \n            \n                \n                    \n                    Tokens\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    src/user/types/email.type.ts\n    \n    \n        \n            \n                \n                    \n                    VerifyEmail\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            GetCurrentUser   (src/.../getCurrentUser.decorator.ts)\n                        \n                        \n                            JWT_ACCESS_TOKEN   (src/.../main.ts)\n                        \n                        \n                            JWT_ACCESS_TOKEN_SECRET   (src/.../accessToken.strategy.ts)\n                        \n                        \n                            JWT_REFRESH_TOKEN_SECRET   (src/.../refreshToken.strategy.ts)\n                        \n                        \n                            Public   (src/.../public.decorator.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/user/decorators/getCurrentUser.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        GetCurrentUser\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createParamDecorator(\n  (data: string | undefined, context: ExecutionContext) => {\n    const req = context.switchToHttp().getRequest();\n    if (!data) return req.user;\n    return req.user[data];\n  },\n)\n                    \n                \n\n\n        \n    \n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        JWT_ACCESS_TOKEN\n                        \n                    \n                \n            \n                \n                    \n                        Default value : `8917ca796f23e75d55dba448bdb99ed3f648a96243a8aea47f8b0a3fad566dc1c826868a0b075542e656000fe67aeff32f0977002c3232bc47ed5eeb8b570864'Q(cx/Vsz5?R@Y$R?4LFWtRT#eKnu)j:q^ycQekzpz/a7g[yfu[Mw;$NNxWhQ7DdT-06ca2296da7e20911ac99762e524b26fb9eb09de849c41d7de8eb823e2eb8fa7a90e95bd14d27b6d9766610a4f8e195682fcdf26bdb1493362aa9effb5b2ca0a`\n                    \n                \n\n\n        \n    \n\n    src/user/strategies/accessToken.strategy.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        JWT_ACCESS_TOKEN_SECRET\n                        \n                    \n                \n            \n                \n                    \n                        Default value : `89bf192b2b6468668da83dff4f0bc2d17908644894327050-~[JK;XKk6$/7U!G}@7*~ud$EdL,5WY+e!eGSHs5%?\"qaDXM@m3):nZE8/S~M%Wr'7%XXc=v9$Ag#23fe59bafc89daf4eba0d84585a2090976efac9fee0e3d1b91324a89b1d33e6a96cc5904ddddeb4d1b58ce0f549cbc52f0227a28833652c0cf1342482583adc9q3%A^d!]w9Z/3wT,%F*$)xj}r`\n                    \n                \n\n\n        \n    \n\n    src/user/strategies/refreshToken.strategy.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        JWT_REFRESH_TOKEN_SECRET\n                        \n                    \n                \n            \n                \n                    \n                        Default value : `bbb6891861a6d735a7e9649fd03f3ccc2f7f43b30db0b49f37f7ee732976bf591b774868082c2f665827932625c76bb5ac05bb91d080a25c7aef3c38ad471033D&Y2Kwkbvs9Q/=uUE,7hSB-5\n                    \n                \n\n\n        \n    \n\n    src/user/decorators/public.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        Public\n                        \n                    \n                \n            \n                \n                    \n                        Default value : () => SetMetadata('isPublic', true)\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
